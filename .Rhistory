# pre-generate all the pages:
speakers <- c("Hadley Wickham", "Winston Chang", "Joe Cheng", "Bruno Rodrigues")
topics <- list(
c("ggplot2", "rlang"),
c("shiny", "rlang"),
c("shiny", "httpuv"),
c("reproducibility", "nix")
)
# create_topic_conditions <- \(topics) {
#   paste0("input.topics.includes('", topics, "')", collapse = " || ")
# }
create_topic_conditions <- \(topics) {
paste0("input.topics.length === 0 || ",  # Show all when no selection
paste0("input.topics.includes('", topics, "')", collapse = " || "))
}
create_speaker_conditions <- \(speakers) {
paste0("(input.search_term != '' && '", speakers, "'.toLowerCase().includes(input.search_term.toLowerCase()))", collapse = " || ")
}
create_talk_card <- \(speaker, topics) {
topic_li <- lapply(topics, tags$li)
topic_ul <- tags$ul(topic_li)
card <- tags$div(
class = "card",
tags$div(
class = "card-body",
tags$h4(speaker),
topic_ul
)
)
col <- tags$div(
class = "col-12 col-md-4",
card
)
conditions <- paste(
create_topic_conditions(topics = topics),
create_speaker_conditions(speakers = speaker),
sep = " || "
)
conditionalPanel(
condition = conditions,
col
)
}
all_cards <- Map(f = create_talk_card, speakers, topics)
all_talks <- tags$div(
class = "row",
all_cards
)
topic_input <- checkboxGroupInput(
inputId = "topics",
label = "Session Topics",
choices = topics |> unlist() |> unique(),
selected = NULL
)
search_input <- textInput(
inputId = "search_term",
label = NULL,
placeholder = "Search by speaker"
)
ui <- page(
tags$h3("Clientside Navigation"),
search_input,
tags$div(
class = "row",
tags$div(
class = "col-2",
topic_input
),
tags$div(
class = "col-10",
all_talks
)
)
)
server <- \(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
library(bslib)
# pre-generate all the pages:
speakers <- c("Hadley Wickham", "Winston Chang", "Joe Cheng", "Bruno Rodrigues")
topics <- list(
c("ggplot2", "rlang"),
c("shiny", "rlang"),
c("shiny", "httpuv"),
c("reproducibility", "nix")
)
# create_topic_conditions <- \(topics) {
#   paste0("input.topics.includes('", topics, "')", collapse = " || ")
# }
create_topic_conditions <- \(topics) {
paste0("input.topics.length === 0 || ",  # Show all when no selection
paste0("input.topics.includes('", topics, "')", collapse = " || "))
}
# create_speaker_conditions <- \(speakers) {
#   paste0("(input.search_term != '' && '", speakers, "'.toLowerCase().includes(input.search_term.toLowerCase()))", collapse = " || ")
# }
create_speaker_conditions <- \(speaker) {
paste0("input.search_term.length === 0 || '", speaker, "'.toLowerCase().includes(input.search_term.toLowerCase())")
}
create_talk_card <- \(speaker, topics) {
topic_li <- lapply(topics, tags$li)
topic_ul <- tags$ul(topic_li)
card <- tags$div(
class = "card",
tags$div(
class = "card-body",
tags$h4(speaker),
topic_ul
)
)
col <- tags$div(
class = "col-12 col-md-4",
card
)
# conditions <- paste(
#   create_topic_conditions(topics = topics),
#   create_speaker_conditions(speakers = speaker),
#   sep = " || "
# )
conditions <- paste(
create_topic_conditions(topics),
create_speaker_conditions(speaker),
sep = " && "  # Ensure both conditions must be true
)
conditionalPanel(
condition = conditions,
col
)
}
all_cards <- Map(f = create_talk_card, speakers, topics)
all_talks <- tags$div(
class = "row",
all_cards
)
topic_input <- checkboxGroupInput(
inputId = "topics",
label = "Session Topics",
choices = topics |> unlist() |> unique(),
selected = NULL
)
search_input <- textInput(
inputId = "search_term",
label = NULL,
placeholder = "Search by speaker"
)
ui <- page(
tags$h3("Clientside Navigation"),
search_input,
tags$div(
class = "row",
tags$div(
class = "col-2",
topic_input
),
tags$div(
class = "col-10",
all_talks
)
)
)
server <- \(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
library(bslib)
# pre-generate all the pages:
speakers <- c("Hadley Wickham", "Winston Chang", "Joe Cheng", "Bruno Rodrigues")
topics <- list(
c("ggplot2", "rlang"),
c("shiny", "rlang"),
c("shiny", "httpuv"),
c("reproducibility", "nix")
)
# create_topic_conditions <- \(topics) {
#   paste0("input.topics.includes('", topics, "')", collapse = " || ")
# }
create_topic_conditions <- \(topics) {
paste0("input.topics.length === 0 || ",  # Show all when no selection
paste0("input.topics.includes('", topics, "')", collapse = " || "))
}
create_speaker_conditions <- \(speakers) {
paste0("(input.search_term != '' && '", speakers, "'.toLowerCase().includes(input.search_term.toLowerCase()))", collapse = " || ")
}
create_talk_card <- \(speaker, topics) {
topic_li <- lapply(topics, tags$li)
topic_ul <- tags$ul(topic_li)
card <- tags$div(
class = "card",
tags$div(
class = "card-body",
tags$h4(speaker),
topic_ul
)
)
col <- tags$div(
class = "col-12 col-md-4",
card
)
conditions <- paste(
create_topic_conditions(topics = topics),
create_speaker_conditions(speakers = speaker),
sep = " || "
)
conditionalPanel(
condition = conditions,
col
)
}
all_cards <- Map(f = create_talk_card, speakers, topics)
all_talks <- tags$div(
class = "row",
all_cards
)
topic_input <- checkboxGroupInput(
inputId = "topics",
label = "Session Topics",
choices = topics |> unlist() |> unique(),
selected = NULL
)
search_input <- textInput(
inputId = "search_term",
label = NULL,
placeholder = "Search by speaker"
)
ui <- page(
tags$h3("Clientside Navigation"),
search_input,
tags$div(
class = "row",
tags$div(
class = "col-2",
topic_input
),
tags$div(
class = "col-10",
all_talks
)
)
)
server <- \(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
library(bslib)
# Pre-generate all the pages:
speakers <- c("Hadley Wickham", "Winston Chang", "Joe Cheng", "Bruno Rodrigues")
topics <- list(
c("ggplot2", "rlang"),
c("shiny", "rlang"),
c("shiny", "httpuv"),
c("reproducibility", "nix")
)
create_topic_conditions <- \(topics) {
paste0("input.topics.length === 0 || ",  # Show all when no selection
paste0("input.topics.includes('", topics, "')", collapse = " || "))
}
create_speaker_conditions <- \(speaker) {
paste0("input.search_term.length === 0 || '", speaker, "'.toLowerCase().includes(input.search_term.toLowerCase())")
}
create_talk_card <- \(speaker, topics) {
topic_li <- lapply(topics, tags$li)
topic_ul <- tags$ul(topic_li)
card <- tags$div(
class = "card",
tags$div(
class = "card-body",
tags$h4(speaker),
topic_ul
)
)
col <- tags$div(
class = "col-12 col-md-4",
card
)
# Combine both conditions using `||` so that either filter works independently
conditions <- paste(
create_topic_conditions(topics),
create_speaker_conditions(speaker),
sep = " || "
)
conditionalPanel(
condition = conditions,
col
)
}
all_cards <- Map(f = create_talk_card, speakers, topics)
all_talks <- tags$div(
class = "row",
all_cards
)
topic_input <- checkboxGroupInput(
inputId = "topics",
label = "Session Topics",
choices = topics |> unlist() |> unique(),
selected = NULL # No default selection
)
search_input <- textInput(
inputId = "search_term",
label = NULL,
placeholder = "Search by speaker"
)
ui <- page(
tags$h3("Clientside Navigation"),
search_input,
tags$div(
class = "row",
tags$div(
class = "col-2",
topic_input
),
tags$div(
class = "col-10",
all_talks
)
)
)
server <- \(input, output, session) {}
shinyApp(ui, server)
library(shiny)
library(bslib)
# Pre-generate all the pages:
speakers <- c("Hadley Wickham", "Winston Chang", "Joe Cheng", "Bruno Rodrigues")
topics <- list(
c("ggplot2", "rlang"),
c("shiny", "rlang"),
c("shiny", "httpuv"),
c("reproducibility", "nix")
)
# Show all talks if no topics are selected OR if at least one topic matches
create_topic_conditions <- \(topics) {
paste0("(input.topics.length === 0 || input.topics.some(t => ['",
paste0(topics, collapse = "', '"), "'].includes(t)))")
}
# Show all talks if search is empty OR if speaker name includes the search term
create_speaker_conditions <- \(speaker) {
paste0("(input.search_term.length === 0 || '",
tolower(speaker), "'.includes(input.search_term.toLowerCase()))")
}
create_talk_card <- \(speaker, topics) {
topic_li <- lapply(topics, tags$li)
topic_ul <- tags$ul(topic_li)
card <- tags$div(
class = "card",
tags$div(
class = "card-body",
tags$h4(speaker),
topic_ul
)
)
col <- tags$div(
class = "col-12 col-md-4",
card
)
# Use `&&` so both filters must match
conditions <- paste(
create_topic_conditions(topics),
create_speaker_conditions(speaker),
sep = " && "
)
conditionalPanel(
condition = conditions,
col
)
}
all_cards <- Map(f = create_talk_card, speakers, topics)
all_talks <- tags$div(
class = "row",
all_cards
)
topic_input <- checkboxGroupInput(
inputId = "topics",
label = "Session Topics",
choices = topics |> unlist() |> unique(),
selected = NULL # No default selection
)
search_input <- textInput(
inputId = "search_term",
label = NULL,
placeholder = "Search by speaker"
)
ui <- page(
tags$h3("Clientside Navigation"),
search_input,
tags$div(
class = "row",
tags$div(
class = "col-2",
topic_input
),
tags$div(
class = "col-10",
all_talks
)
)
)
server <- \(input, output, session) {}
shinyApp(ui, server)
devtools::load_all()
golem::add_utils("helpers", with_test = TRUE)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all(verbose = TRUE)
devtools::load_all(export_all = FALSE
)
golem::run_dev()
data(sysdata, envir=environment())
combined_data_collapsed <- combined_data |>
dplyr::group_by(talk_title) |>
dplyr::mutate(session_topics = paste(session_topics, collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::distinct() |>
dplyr::mutate(video_id = sub("https://youtu.be/", "", yt_url)) |>
tidyr::drop_na(yt_url)
list_combined_data_collapsed <- unname(split(combined_data_collapsed, seq(nrow(combined_data_collapsed))))
list_combined_data_collapsed
combined_data_collapsed
# usethis::use_data(combined_data, internal = TRUE)
usethis::use_data(combined_data_collapsed, overwrite = TRUE)
View(combined_data_collapsed)
devtools::load_all()
devtools::load_all()
combined_data_collapsed
all_hidden_pages
devtools::load_all()
devtools::load_all()
devtools::load_all()
list_combined_data_collapsed[[1]]
combined_data_collapsed$speaker_name
combined_data_collapsed$session_topics[1]
unlist(strsplit(combined_data_collapsed$session_topics[1], ",\\s*"))
topics <- lapply(combined_data_collapsed$session_topics, \(string){
unlist(strsplit(string, ",\\s*"))
})
topics
speakers <- combined_data_collapsed$speaker_name
topics <- lapply(combined_data_collapsed$session_topics, \(string){
unlist(strsplit(string, ",\\s*"))
})
all_cards <- Map(f = create_talk_card, speakers, topics)
all_cards[[1]]
?page_navbar
?sidebar
?nav_panel
library(shiny)
library(bslib)
ui <- page_navbar(
title = "Two Panel App",
theme = bs_theme(version = 5),
# First panel with sidebar
nav_panel(
title = "Panel 1",
page_sidebar(
sidebar = sidebar(
title = "Controls",
selectInput("select", "Choose a variable:",
choices = c("Option 1", "Option 2", "Option 3")),
sliderInput("slider", "Adjust value:",
min = 0, max = 100, value = 50)
),
card(
card_header("Main Content"),
plotOutput("plot1")
)
)
),
# Second panel without sidebar
nav_panel(
title = "Panel 2",
card(
card_header("Information"),
card_body(
textOutput("text1")
)
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
# Sample plot
hist(rnorm(100), main = paste("Selected:", input$select),
xlab = paste("Slider value:", input$slider))
})
output$text1 <- renderText({
"This is the second panel without a sidebar. It demonstrates how to have different layouts in different panels."
})
}
shinyApp(ui, server)
golem::run_dev()
View(combined_data_collapsed)
#' @import dplyr
#' @import tidyr
#' @import shiny
#' @import bslib
data(combined_data_collapsed, envir=environment())
View(combined_data_collapsed)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?bslib::card
golem::run_dev()
golem::run_dev()
golem::run_dev()
?bslib::card
golem::run_dev()
golem::run_dev()
devtools::check()
golem::run_dev()
