## Fill the DESCRIPTION ----
## Add meta data about your application and set some default {golem} options
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "pctalks", # The name of the golem package containing the app (typically lowercase, no underscore or periods)
pkg_title = "Explore PositConf Talks", # What the Package Does (One Line, Title Case, No Period)
pkg_description = "An app to explore PositConf talks.", # What the package does (one paragraph).
authors = person(
given = "shiny", # Your First Name
family = "meetings", # Your Last Name
email = "umairdurrani@outlook.com", # Your email
role = c("aut", "cre") # Your role (here author/creator)
),
repo_url = NULL, # The URL of the GitHub repo (optional),
pkg_version = "0.0.0.9000", # The version of the package containing the app
set_options = TRUE # Set the global golem options
)
## Install the required dev dependencies ----
golem::install_dev_deps()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license("Shiny Meetings") # You can set another license here
golem::use_readme_rmd(open = TRUE)
devtools::build_readme()
# Note that `contact` is required since usethis version 2.1.5
# If your {usethis} version is older, you can remove that param
# usethis::use_code_of_conduct(contact = "Golem User")
usethis::use_lifecycle_badge("Experimental")
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
devtools::build_readme()
devtools::build_readme()
conf2024 <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-14/conf2024.csv') |>
janitor::clean_names()
conf2024
View(conf2024)
conf2024 <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-14/conf2024.csv') |>
janitor::clean_names()
View(conf2024)
install.packages("rvest")
install.packages("rvest")
renv::init()
renv::status()
install.packages("covrpage")
remotes::install_github('yonicd/covrpage')
renv::settings$ignored.packages(c("pctalks"))
renv::status()
renv::snapshot()
renv::status()
library(dplyr)
library(rvest)
renv::install("rvest")
renv::snapshot()
library(rvest)
library(dplyr)
url <- "https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003976619001avNt"
webpage <- read_html(url)
webpage
strong_texts <- webpage %>%
html_elements("p:has(strong)") %>%
html_text(trim = TRUE)
webpage |>
html_elements("p")
webpage
webpage |>
html_elements()
webpage |>
html_elements("p")
renv::install("RSelenium")
renv::snapshot()
library(rvest)
library(dplyr)
library(RSelenium)
driver <- rsDriver(browser = "firefox", port = 4545L, verbose = FALSE)
?rsDriver
driver <- rsDriver(browser = "chrome")
library(rvest)
library(dplyr)
url <- "https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003976619001avNt"
webpage <- read_html(url)
webpage |>
html_elements("strong")
webpage
webpage |>
html_elements("body")
webpage |>
html_elements("body") |> html_elements("p")
webpage |>
html_elements("body") |> html_elements("div")
webpage |>
html_elements("body") |> html_elements("div") |> html_elements(css = "#rf-content")
webpage |>
html_element("#rf-content")
webpage |>
html_element("#rf-catalog") |>
html_elements("p strong")
webpage |>
html_element("#rf-content")
webpage |>
html_element("#rf-content") |>
html_elements("p strong")
httr2::request("https://events.conf.posit.co/api/session")
httr2::request("https://events.conf.posit.co/api/session") |>
httr2::req_perform()
httr2::request("https://events.conf.posit.co/api/session") |>
httr2::req_method("POST") |>  # Define it as a POST request
httr2::req_headers(
"Content-Type" = "application/json"  # Set the correct content type
) |>
req_perform()
httr2::request("https://events.conf.posit.co/api/session") |>
httr2::req_method("POST") |>  # Define it as a POST request
httr2::req_headers(
"Content-Type" = "application/json"  # Set the correct content type
) |>
httr2::req_perform()
httr2::request("https://events.conf.posit.co/api/session/1712707493462001KPj8") |>
httr2::req_method("POST") |>  # Define it as a POST request
httr2::req_headers(
"Content-Type" = "application/json"  # Set the correct content type
) |>
httr2::req_perform()
webpage |>
html_element("#rf-content")
webpage |>
html_elements("#rf-content")
webpage |>
html_elements("#rf-content") |>
html_elements("#special-div")
webpage |>
html_elements("#rf-content") |>
html_element("#special-div")
webpage |>
# html_elements("#rf-content") |>
html_element("#special-div")
webpage |>
# html_elements("#rf-content") |>
# html_element("#special-div") |>
html_elements("strong")
webpage <- read_html(url)
webpage |>
html_elements("#rf-content")
webpage |>
html_elements("#rf-content") |>
html_elements(".description")
webpage |>
html_elements("#rf-content") |>
html_elements(".description") |> html_text()
webpage |>
html_elements("#rf-content") |>
html_elements(".description strong")
webpage %>%
html_elements("div") %>%
length()
url <- "https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003976619001avNt"
webpage <- read_html(url)
print("Root level elements:")
webpage %>%
html_elements("div") %>%
length()
# Check if we can access by ID
print("\nTrying to find rf-catalog:")
webpage %>%
html_elements("#rf-catalog") %>%
length()
# Try to find the session-details container
print("\nTrying to find session-details-container:")
webpage %>%
html_elements(".session-details-container") %>%
length()
# Let's see all class names at the root level
print("\nClasses at root level:")
webpage %>%
html_elements("div") %>%
html_attr("class")
library(RSelenium)
library(wdman)
library(netstat)
renv::install("netstat")
renv::snapshot()
