max_dist = 1,
method = "osa") |> View()
combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 1,
method = "osa") |> View()
combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 1,
method = "lv") |> View()
combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 1,
method = "lv") |> View()
combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 5,
method = "lv") |> View()
combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 5,
method = "lv",
ignore_case = TRUE) |> View()
combined_data <- combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 5,
method = "lv",
ignore_case = TRUE)
readr::write_csv(combined_data, file = here::here("dev/data/joined_data.csv"))
renv::status()
renv::snapshot()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "create_talk_page", with_test = TRUE)
?bslib::nav_panel_hidden()
golem::run_dev()
golem::run_dev()
?`!!!`
golem::run_dev()
?
?page_navbar
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
? bslib::nav_panel
golem::run_dev()
golem::run_dev()
golem::run_dev()
lapply(
c(
"page"
),
create_talk_page
)
create_talk_page <- function(page_title){
bslib::nav_panel_hidden(
page_title,
"Some Content"
)
}
lapply(
c(
"page"
),
create_talk_page
)
golem::run_dev()
lapply(
c(
"page"
),
create_talk_page
) |> unlist
lapply(
c(
"page"
),
create_talk_page
) |> unlist()
golem::run_dev()
sapply(1:106, \(x) paste0("page", x))
golem::run_dev()
golem::run_dev()
?actionLink
golem::run_dev()
data.frame(page_value = "page1",
talk_title = "Introducing Positron, a new data science IDE",
content = "Positron is a next generation data science IDE that is newly available to the community for early beta testing. This new IDE is an extensible tool built to facilitate exploratory data analysis, reproducible authoring, and publishing data artifacts. Positron currently supports these data workflows in either or both Python and/or R, and is designed with a forward-looking architecture that can support other data science languages in the future. In this session, learn from the team building Positron about how and why it is designed the way it is, what will feel familiar or new coming from other IDEs, and whether it might be a good fit for your own work. ")
create_talk_page <- function(page_data){
bslib::nav_panel_hidden(
value = page_data$page_value,
bslib::card(
bslib::card_header(
actionLink("back_to_session",
"Back to Session Catalog",
icon = icon("arrow-left"))
)
),
bslib::card_body(
h4(page_data$talk_title),
page_data$content
)
)
}
create_talk_page(  data.frame(page_value = "page1",
talk_title = "Introducing Positron, a new data science IDE",
content = "Positron is a next generation data science IDE that is newly available to the community for early beta testing. This new IDE is an extensible tool built to facilitate exploratory data analysis, reproducible authoring, and publishing data artifacts. Positron currently supports these data workflows in either or both Python and/or R, and is designed with a forward-looking architecture that can support other data science languages in the future. In this session, learn from the team building Positron about how and why it is designed the way it is, what will feel familiar or new coming from other IDEs, and whether it might be a good fit for your own work. "))
create_talk_page <- function(page_data){
bslib::nav_panel_hidden(
value = page_data$page_value,
bslib::card(
bslib::card_header(
shiny::actionLink("back_to_session",
"Back to Session Catalog",
icon = icon("arrow-left"))
)
),
bslib::card_body(
shiny::h4(page_data$talk_title),
page_data$content
)
)
}
create_talk_page(  data.frame(page_value = "page1",
talk_title = "Introducing Positron, a new data science IDE",
content = "Positron is a next generation data science IDE that is newly available to the community for early beta testing. This new IDE is an extensible tool built to facilitate exploratory data analysis, reproducible authoring, and publishing data artifacts. Positron currently supports these data workflows in either or both Python and/or R, and is designed with a forward-looking architecture that can support other data science languages in the future. In this session, learn from the team building Positron about how and why it is designed the way it is, what will feel familiar or new coming from other IDEs, and whether it might be a good fit for your own work. "))
create_talk_page <- function(page_data){
bslib::nav_panel_hidden(
value = page_data$page_value,
bslib::card(
bslib::card_header(
shiny::actionLink("back_to_session",
"Back to Session Catalog",
icon = shiny::icon("arrow-left"))
)
),
bslib::card_body(
shiny::h4(page_data$talk_title),
page_data$content
)
)
}
create_talk_page(  data.frame(page_value = "page1",
talk_title = "Introducing Positron, a new data science IDE",
content = "Positron is a next generation data science IDE that is newly available to the community for early beta testing. This new IDE is an extensible tool built to facilitate exploratory data analysis, reproducible authoring, and publishing data artifacts. Positron currently supports these data workflows in either or both Python and/or R, and is designed with a forward-looking architecture that can support other data science languages in the future. In this session, learn from the team building Positron about how and why it is designed the way it is, what will feel familiar or new coming from other IDEs, and whether it might be a good fit for your own work. "))
golem::run_dev()
lapply(
data.frame(page_value = "page1",
talk_title = "Introducing Positron, a new data science IDE",
content = "Positron is a next generation data science IDE that is newly available to the community for early beta testing. This new IDE is an extensible tool built to facilitate exploratory data analysis, reproducible authoring, and publishing data artifacts. Positron currently supports these data workflows in either or both Python and/or R, and is designed with a forward-looking architecture that can support other data science languages in the future. In this session, learn from the team building Positron about how and why it is designed the way it is, what will feel familiar or new coming from other IDEs, and whether it might be a good fit for your own work. "),
create_talk_page
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
conf2024 <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-14/conf2024.csv') |>
janitor::clean_names()
View(conf2024)
usethis::use_data_raw()
library(RSelenium)
library(wdman)
library(rvest)
library(tidyr)
# Function to scrape the data for a given URL
scrape_data <- function(url) {
driver <- rsDriver(
browser = "firefox",
verbose = FALSE
)
remote_driver <- driver[["client"]]
# Navigate to the page
remote_driver$navigate(url)
# Wait for the content to load
Sys.sleep(5)  # Give it time to load
# Get the page source after JavaScript execution
page_source <- remote_driver$getPageSource()[[1]]
# Parse with rvest
loaded_page <- read_html(page_source)
# Extract the content
content <- loaded_page %>%
html_elements("strong") %>%
html_text()
topics <- loaded_page %>%
html_elements(".attribute-SessionTopics") %>%
html_text()
stype <- loaded_page %>%
html_elements(".attribute-SessionType") %>%
html_text()
# Clean up
remote_driver$close()
driver$server$stop()
# Clean the extracted data
content_clean <- content[!content %in% c("", "Session Catalog", "Browse the posit::conf(2024) agenda below!")]
content_clean <- sub(" -.*", "", content_clean)
topics_after_colon <- sub(".*: ", "", topics)
type_after_colon <- sub(".*: ", "", stype)
if (length(content_clean) > 0) {
return(data.frame(
talk_title = content_clean,
session_type = type_after_colon,
session_topics = topics_after_colon
) %>%
tidyr::separate_longer_delim(cols = "session_topics", delim = ", "))
} else {
return(NULL)
}
}
urls <- c(
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520449001rbm2",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003976619001avNt",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712707493462001KPj8",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003957019001aS0p",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711986791933001rL5i",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520214001rsxW",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003933811001s83h",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004081660001s6Bc",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520292001rO6c",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004124994001gOid",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520123001r456",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003906159001eMTZ",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520332001rWs6",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520486001rVxN",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520527001rYhv",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711986837132001Q4tq",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711986881929001eEbl",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711722448948001FQUK",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520171001rWU0",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711986820020001vWw8",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712003879414001GYzI",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520371001rrCt",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004041983001s1h4",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520411001rz6v",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711986858836001vnVj",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520252001r61y",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1711988955885001ee9D",
"https://reg.conf.posit.co/flow/posit/positconf24/publiccatalog/page/publiccatalog/session/1712004520570001r6eL"
)
# Apply the function to all URLs
all_data <- lapply(urls, scrape_data)
# Combine all data into one data frame
combined_data <- do.call(rbind, all_data)
conf2024 <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-14/conf2024.csv') |>
janitor::clean_names()
combined_data <- combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 5,
method = "lv",
ignore_case = TRUE)
View(combined_data)
library(dplyr)
combined_data |>
mutate(
session_type = case_when(
is.na(session_type) ~ track,
.default = session_type
)
) |> View()
combined_data |>
mutate(
session_type = case_when(
is.na(session_type) ~ track,
.default = session_type
)
) |>
drop_na(talk_title.y) |> View()
combined_data |>
mutate(
session_type = case_when(
is.na(session_type) ~ track,
.default = session_type
)
) |>
drop_na(talk_title.y) |>
select(-talk_title.x) |>
rename(talk_title = talk_title.y) |> View()
combined_data <- combined_data |>
mutate(
session_type = case_when(
is.na(session_type) ~ track,
.default = session_type
)
) |>
drop_na(talk_title.y) |>
select(-talk_title.x) |>
rename(talk_title = talk_title.y) |> View()
combined_data <- do.call(rbind, all_data)
combined_data <- combined_data |>
fuzzyjoin::stringdist_full_join(conf2024 |>
dplyr::mutate(talk_title = sub(" -.*", "", talk_title)),
by = "talk_title",
max_dist = 5,
method = "lv",
ignore_case = TRUE)
combined_data <- combined_data |>
mutate(
session_type = case_when(
is.na(session_type) ~ track,
.default = session_type
)
) |>
drop_na(talk_title.y) |>
select(-talk_title.x) |>
rename(talk_title = talk_title.y)
usethis::use_data(combined_data, overwrite = TRUE)
golem::run_dev()
dim(combined_data)
View(combined_data)
names(combined_data)
#' \describe{
#'   \item{session_type}{Type of session}
#'   \item{session_topics}{Topics of session}
#'   \item{talk_title}{Talk title}
#'   \item{talk_title}{Talk title}
#'   \item{talk_title}{Talk title}
#'   \item{talk_title}{Talk title}
#'   \item{talk_title}{Talk title}
#' }
#' @source <https://www.who.int/teams/global-tuberculosis-programme/data>
"who"
combined_data |>
distinct(talk_title)
?distinct
combined_data |>
dplyr::distinct(talk_title)
combined_data |>
dplyr::distinct(talk_title) |> class()
combined_data |>
dplyr::distinct(talk_title) |>
mutate(page_value = paste0("page", row_number()))
library(dplyr)
combined_data |>
distinct(talk_title) |>
mutate(page_value = paste0("page", row_number()))
combined_data |>
distinct(talk_title) |>
mutate(page_value = paste0("page", row_number())) |>
right_join(combined_data, by = "talk_title") |> View()
combined_data <- combined_data |>
distinct(talk_title) |>
mutate(page_value = paste0("page", row_number())) |>
right_join(combined_data, by = "talk_title")
usethis::use_data(combined_data, overwrite = TRUE)
View(combined_data)
combined_data |>
group_by(talk_title) |>
summarise(session_topics = paste(session_topics, collapse = ", ")) |> View()
combined_data |>
group_by(talk_title) |>
summarise(session_topics = paste(session_topics, collapse = ", "))
combined_data |>
group_by(talk_title) |>
mutate(session_topics = paste(session_topics, collapse = ", ")) |> View()
combined_data |>
group_by(talk_title) |>
mutate(session_topics = paste(session_topics, collapse = ", ")) |>
ungroup() |>
distinct() |> View()
combined_data_collapsed <- combined_data |>
group_by(talk_title) |>
mutate(session_topics = paste(session_topics, collapse = ", ")) |>
ungroup() |>
distinct()
combined_data_collapsed |> rowwise()
golem::run_dev()
golem::run_dev()
unlist(combined_data_collapsed)
split(combined_data_collapsed, seq(nrow(combined_data_collapsed)))
list_combined_data_collapsed <- split(combined_data_collapsed, seq(nrow(combined_data_collapsed)))
list_combined_data_collapsed <- split(combined_data_collapsed, seq(nrow(combined_data_collapsed)))
golem::run_dev()
View(combined_data_collapsed)
golem::run_dev()
head(list_combined_data_collapsed)
?split
split(combined_data_collapsed)
list_combined_data_collapsed <- unname(split(combined_data_collapsed, seq(nrow(combined_data_collapsed))))
head(list_combined_data_collapsed)
golem::run_dev()
View(combined_data_collapsed)
combined_data_collapsed |> filter(talk_title == "Introducing Positron")
combined_data_collapsed |> dplyr::filter(talk_title == "Introducing Positron")
combined_data_collapsed |> dplyr::filter(talk_title == "Introducing Positron") |> pull(speaker_name)
combined_data_collapsed |> dplyr::filter(talk_title == "Introducing Positron") |> dplyr::pull(speaker_name)
golem::run_dev()
golem::run_dev()
?shiny::tags$iframe
?iframe
golem::run_dev()
combined_data_collapsed <- combined_data |>
dplyr::group_by(talk_title) |>
dplyr::mutate(session_topics = paste(session_topics, collapse = ", ")) |>
dplyr::ungroup() |>
dplyr::distinct() |>
dplyr::mutate(video_id = sub("https://youtu.be/", "", yt_url))
View(combined_data_collapsed)
golem::run_dev()
?drop_na
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
devtools::check()
devtools::load_all()
load("data/combined_data.rda")
load("data/combined_data.rda")
View(combined_data)
devtools::load_all()
devtools::load_all()
devtools::document()
load("data/combined_data.rda")
usethis::use_data(combined_data, internal = TRUE)
devtools::load_all()
combined_data
renv::status()
devtools::check()
devtools::check()
usethis::use_package("bslib")
usethis::use_package("rlang")
usethis::use_package("rlang")
devtools::check()
usethis::use_package("tidyr")
devtools::check()
load("D:/pctalks/R/sysdata.rda")
devtools::load_all()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
load("D:/pctalks/R/sysdata.rda")
# usethis::use_data(combined_data, internal = TRUE)
usethis::use_data(combined_data, overwrite = TRUE)
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
#' \describe{
#'   \item{country}{Country name}
#'   \item{iso2, iso3}{2 & 3 letter ISO country codes}
#'   \item{year}{Year}
#'   \item{year}{Year}
#'   \item{year}{Year}
#'   \item{year}{Year}
#'   ...
#' }
#' @source <https://www.who.int/teams/global-tuberculosis-programme/data>
"who"
load("D:/pctalks/data/sysdata.rda")
View(combined_data)
names(combined_data)
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
usethis::use_package("dplyr")
## Run checks ----
## Check the package before sending to prod
devtools::check()
usethis::use_package("tidyr")
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::load_all()
## Run checks ----
## Check the package before sending to prod
devtools::document()
golem::run_dev()
## Run checks ----
## Check the package before sending to prod
devtools::document()
## Run checks ----
## Check the package before sending to prod
devtools::load_all()
?combined_data
dim(combined_data)
View(combined_data)
## Run checks ----
## Check the package before sending to prod
devtools::document()
